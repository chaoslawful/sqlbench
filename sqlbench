#!/usr/bin/env node
// vim:ft=javascript ts=4 sw=4 et fdm=marker

var os = require('os');

// command-line options parsing
var optDesc = require('optimist')
			.usage('Usage: $0 [options] <sql list file>')
			.describe({
				H:'Specifies database host',
				P:'Specifies database port',
				u:'Specifies database user',
				p:'Specifies database password',
				d:'Specifies database to use',
                w:'Specifies number of worker processes',
				c:'Specifies number of concurrent connections per worker',
                o:'Specifies timing log path',
			})
			.default({
				H:'localhost',
				P:3306,
				u:'root',
				p:'',
				d:'test',
                w:0,
				c:10,
                o:'result.log',
			})
            .string(['H', 'u', 'p', 'd', 'o']);
var argv = optDesc.argv;

if(argv.h) {
	optDesc.showHelp();
    process.exit(1);
}

if(argv._.length != 1) {
	optDesc.showHelp();
	console.error('Must specify SQL list file in command line!');
    process.exit(1);
}

var host = argv.H;
var port = argv.P;
var user = argv.u;
var pass = argv.p;
var db = argv.d;
var nworker = argv.w || os.cpus().length;
var nconc = argv.c;
var logPath = argv.o;
var sqlPath = argv._[0];

var fs = require('fs');
var cluster = require('cluster');
var lineReader = require('line-reader');

if(cluster.isMaster) {
    // count sql number
    var totalLines = 0;
    lineReader.eachLine(sqlPath, function(line, last) {
        totalLines++;
    }).then(function() {
        // fork workers
        process.env['SQLBENCH_TOTAL_LINES'] = totalLines;
        for(var i=0; i<nworker; i++) {
            process.env['SQLBENCH_WORKER_ID'] = i;
            cluster.fork();
        }
    });
} else {
    // do business in worker
    var mysql = require('mysql');

    var totalLines = process.env['SQLBENCH_TOTAL_LINES'];
    var workerId = process.env['SQLBENCH_WORKER_ID'];
    var shard = workerId % nworker;

    var logFileName = logPath + "." + workerId;
    var errFileName = logPath + "." + workerId + ".err";

    try {
        fs.unlinkSync(logFileName);
    }catch(e){}
    try {
        fs.unlinkSync(errFileName);
    }catch(e){}
    var logFd = fs.openSync(logFileName, "a+");
    var errFd = fs.openSync(errFileName, "a+");

    // create mysql connections
    var conns = [];
    for(var i=0; i<nconc; i++) {
        var conn = mysql.createConnection({
            host: host,
            port: port,
            user: user,
            password: pass,
            database: db,
            charset: 'utf8',
        });
        conn.connect();
        conns.push(conn);
    }

    // run benchmarking
    var lineCnt = 0;
    var connCnt = 0;
    var queryCnt = 0;
    var logCnt = 0;
    var errCnt = 0;

    // periodly check completion condition
    setInterval(function() {
        if(Math.abs(lineCnt-totalLines)<=1 && queryCnt==logCnt) {
            console.warn('worker ' + workerId + ' reach barrier: logged %d records (contains %d error records)', logCnt, errCnt);
            process.exit(0);
        }
    }, 1000);

    lineReader.eachLine(sqlPath, function(line, last) {
        if(lineCnt % nworker == shard) {
            // process.hrtime() only available in 0.8.x, here we use
            // os.uptime() to keep backward-compatibility with 0.6.x
            var queryStart = os.uptime();

            if(line.length > 0) {
                queryCnt++;
                conns[connCnt].query(line, function(err, rows, fields) {
                    if(err) {
                        var entry = line + "\t" + err + "\n";
                        var buf = new Buffer(entry, "utf8");
                        errCnt++;
                        fs.write(errFd, buf, 0, buf.length, null, function(err, written, buffer) {
                            if(err) throw err;
                            logCnt++;
                        });
                        return;
                    }

                    var queryStop = os.uptime();

                    // log query and timing info
                    var entry = line + "\t" + (queryStop - queryStart) + "\n";
                    var buf = new Buffer(entry, "utf8");
                    fs.write(logFd, buf, 0, buf.length, null, function(err, written, buffer) {
                        if(err) throw err;
                        logCnt++;
                    });
                }
                );
            }

            // use connections in round-robin way
            connCnt = (connCnt+1) % nconc;
        }

        lineCnt++;
    });
}

